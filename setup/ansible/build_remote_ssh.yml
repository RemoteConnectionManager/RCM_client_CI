---
# This can be used only with latest Fedora
- hosts: all
  gather_facts: false

  vars:
    build_path: /var/tmp/
    packages:
      - ansible
      - curl
      - elfutils-libelf-devel
      - gcc
      - git
      - jq
      - kernel-devel
      - libvirt-client
      - libvirt-daemon-kvm
      - libvirt-devel
      - python-winrm
      - qemu-img
      - qemu-kvm
      - unzip
      - https://releases.hashicorp.com/vagrant/2.1.1/vagrant_2.1.1_x86_64.rpm
      - VirtualBox
      - wget
      - xorg-x11-xauth
      - xorg-x11-server-utils
    packer_url: https://releases.hashicorp.com/packer/1.2.3/packer_1.2.3_linux_amd64.zip
    packer_templates_git_repo: https://github.com/ruzickap/packer-templates.git
    rpmfusion_repositories:
      - http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_version }}.noarch.rpm
      - http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_version }}.noarch.rpm
    run_script: ./build_all.sh
    vagrant_plugins:
      - vagrant-libvirt
      - vagrant-winrm

  tasks:
    - name: Install Python 2
      raw: sudo bash -x -c "test -e /usr/bin/python || ( test -x /usr/bin/apt && ( apt -qqy update && apt install -y python-minimal ) || ( test -x /usr/bin/dnf && dnf install -y python ))"
      register: output
      changed_when: output.stdout is search("Installing")

    - name: Gather facts
      setup:

    - block:
      - name: Install libselinux-python needed for Fedora
        dnf:
          name: libselinux-python

      - name: Disable SELinux
        selinux:
          state: disabled

      - name: Install rpmfusion repositories
        dnf:
          name: "{{ item }}"
        with_items: "{{ rpmfusion_repositories }}"

      - name: Upgrade all packages
        dnf:
          name: "*"
          state: latest

      - name: Check if reboot is necessary
        shell: LAST_KERNEL=$(rpm -q --last kernel-core | awk 'NR==1 {sub(/kernel-core-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; fi
        changed_when: false
        register: reboot_out

      - block:
        - name: As user for permission to reboot machne to boot to latest kernel
          pause:
            prompt: 'Please confirm you want to reboot the remote machine: {{ ansible_host }}! Press return to continue. Press Ctrl+c and then "a" to abort'

        - name: Reboot machne to boot to latest kernel
          shell: sleep 2 && shutdown -r now "Ansible triggered reboot"
          async: 1
          poll: 0
          ignore_errors: true

        - name: Wait for system to boot up
          wait_for:
            host: "{{ ansible_host }}"
            port: "{{ ansible_port | default('22') }}"
            search_regex: OpenSSH
            delay: 30
          connection: local
          become: False
        when: reboot_out.stdout is search("reboot")

      - name: Install packages
        dnf:
          name: "{{ item }}"
        with_items: "{{ packages }}"

      - name: Download and unzip packer
        unarchive:
          src: "{{ packer_url }}"
          dest: /usr/local/bin/
          remote_src: yes
          creates: /usr/local/bin/packerio
          validate_certs: false

      - name: Move packer to packerio
        command: mv /usr/local/bin/packer /usr/local/bin/packerio
        args:
          creates: /usr/sbin/packerio
      become: true

    - name: List installed Vagrant Plugins
      command: vagrant plugin list
      register: vagrant_plugin_list
      changed_when: false

    - name: Install Vagrant Plugins
      command: vagrant plugin install {{ item }}
      with_items: "{{ vagrant_plugins }}"
      when: vagrant_plugin_list.stdout is not search(item)

    - name: Clone the git repository
      git:
        repo: "{{ packer_templates_git_repo }}"
        dest: "{{ build_path }}/packer-templates"
        force: yes

    - name: Execute script to build boxes (this step usually takes long time) [for more details check *.log in /var/tmp/packer]
      shell: "{{ run_script }}"
      register: run_script_out
      args:
        chdir: "{{ build_path }}/packer-templates"

    - name: Run vagrant_init_destroy_boxes.sh script to test all previously created box images (this step usually takes long time) [for more details check /tmp/vagrant_init_destroy_boxes.log]
      shell: ./vagrant_init_destroy_boxes.sh
      register: out
      args:
        chdir: "{{ build_path }}/packer-templates"
